{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","prev","operator","result","event","setState","target","textContent","num","parseFloat","concat","includes","equal","_this$state","_this2","react_default","a","createElement","className","mdbreact","onClick","reset","negative","percent","divide","multiply","minus","add","numOnClick","dot","Component","App","style","height","width","src_components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1146709.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Button } from 'mdbreact'\nimport './Calculator.scss'\n\nclass Calculator extends Component {\n  constructor(props) {\n    super()\n    this.state = { text: '0', prev: null, operator: null, result: null }\n    // this binding is necessary to make `this` work in the callback\n    // however, it is unnessary in this app because each button will\n    // handle the event by passing the event object to each corresponding method\n    // see: https://reactjs.org/docs/handling-events.html\n    // this.handleClick = this.handleClick.bind(this);\n  }\n  \n  numOnClick (event) {\n    const { text } = this.state\n    if (text === '0') {\n      this.setState({ text: event.target.textContent })\n    } else {\n      this.setState({ text: text + event.target.textContent })\n    }\n  }\n  reset () {\n    this.setState({ text: '0', prev: null, operator: null, result: null })\n  }\n  negative () {\n    let num = parseFloat(this.state.text)\n    num = num === 0 ? 0 : -num\n    this.setState({ text: `${num}` })\n  }\n  percent () {\n    let num = parseFloat(this.state.text)\n    num = num === 0 ? 0 : num/100\n    this.setState({ text: `${num}` })\n  }\n  dot () {\n    let num = parseFloat(this.state.text)\n    if (this.state.text.includes('.')) {\n      num = num === 0 ? 0 : `${num}`\n    } else {\n      num = num === 0 ? 0 : `${num}.`\n    }\n    this.setState({ text: `${num}` })\n  }\n  divide () {\n    let num = parseFloat(this.state.text)\n    this.setState({ \n      text: '0',\n      prev: this.state.prev? this.equal() : num,\n      operator: '/',\n      result: this.state.prev? this.equal() : num\n    })\n  }\n  multiply () {\n    let num = parseFloat(this.state.text)\n    this.setState({ \n      text: '0',\n      prev: this.state.prev? this.equal() : num,\n      operator: '*'\n    })\n  }\n  add () {\n    let num = parseFloat(this.state.text)\n    this.setState({ \n      text: '0',\n      prev: this.state.prev? this.equal() : num,\n      operator: '+'\n    })\n  }\n  minus () {\n    let num = parseFloat(this.state.text)\n    this.setState({ \n      text: '0',\n      prev: this.state.prev? this.equal() : num,\n      operator: '-'\n    })\n  }\n  equal () {\n    const { prev, operator } = this.state\n    let num = parseFloat(this.state.text)\n    let result\n    if (operator === '/' ) {\n      result = prev / num\n    } else if (operator === '*') {\n      result = prev * num\n    } else if (operator === '+') {\n      result = prev + num\n    } else if (operator === '-') {\n      result = prev - num\n    } else {\n      result = num\n    }\n    this.setState({ text: `${result}`, prev: null, operator: null, result: null })\n    return result\n  }  \n  \n  render() {\n    return (\n      <div className=\"Calculator\">\n        <div className=\"grid-item text\">{this.state.text}</div>\n        <div className=\"operators\">\n          <Button className=\"grid-item reset\" onClick={event => this.reset(event)}>A/C</Button>\n          <Button className=\"grid-item negative\" onClick={event => this.negative(event)}>+/-</Button>\n          <Button className=\"grid-item percent\" onClick={event => this.percent(event)}>%</Button>\n        </div>\n        <div className=\"operand\">\n          <Button className=\"grid-item divide\" onClick={event => this.divide(event)}>/</Button>\n          <Button className=\"grid-item multiply\" onClick={event => this.multiply(event)}>x</Button>\n          <Button className=\"grid-item minus\" onClick={event => this.minus(event)}>-</Button>\n          <Button className=\"grid-item add\" onClick={event => this.add(event)}>+</Button>\n          <Button className=\"grid-item equal\" onClick={event => this.equal(event)}>=</Button>\n        </div>\n        <div className=\"numbers-dot\">\n          <Button className=\"grid-item num1\" onClick={event => this.numOnClick(event)}>1</Button>\n          <Button className=\"grid-item num2\" onClick={event => this.numOnClick(event)}>2</Button>\n          <Button className=\"grid-item num3\" onClick={event => this.numOnClick(event)}>3</Button>\n          <Button className=\"grid-item num4\" onClick={event => this.numOnClick(event)}>4</Button>\n          <Button className=\"grid-item num5\" onClick={event => this.numOnClick(event)}>5</Button>\n          <Button className=\"grid-item num6\" onClick={event => this.numOnClick(event)}>6</Button>\n          <Button className=\"grid-item num7\" onClick={event => this.numOnClick(event)}>7</Button>\n          <Button className=\"grid-item num8\" onClick={event => this.numOnClick(event)}>8</Button>\n          <Button className=\"grid-item num9\" onClick={event => this.numOnClick(event)}>9</Button>\n          <Button className=\"grid-item num0\" onClick={event => this.numOnClick(event)}>0</Button>\n          <Button className=\"grid-item dot\" onClick={event => this.dot(event)}>.</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Calculator;\n","import React, { Component } from 'react';\nimport Calculator from './components/Calculator'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={{ height: '100vh', width: '100%' }}>\n          <Calculator/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}